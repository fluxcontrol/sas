#!/bin/sh

################################################################################
### REGISTER DEFINITIONS
###   define register values, operand match sets, etc.
################################################################################
# general purpose registers
eax=0
 ax=0
 al=0
ebx=3
 bx=3
 bl=3
ecx=1
 cx=1
 cl=1
edx=2
 dx=2
 dl=2

# high 8-bit general purpose registers
 ah=4
 bh=7
 ch=5
 dh=6

# base/index registers
esp=4
 sp=4
 sl=4
ebp=5
 bp=5
 bl=5
esi=6
 si=6
sil=6
edi=7
 di=7
dil=4

# segment registers
es=0
cs=1
ss=2
ds=3
fs=4
gs=5

# used for matching
reg32="e[a-d]x e[bds]i e[bs]p"
reg16="[a-d]x [bds]i [bs]p [c-gs]s"
reg8="[a-d][hl]"
sreg="[c-gs]s"
regs="$reg32 $reg16 $reg8 $sreg"

################################################################################
### MNEMONICS (ASM INSTRUCTIONS)
###   the "standard" x86 intel instruction mnemonics (yes, intel syntax, no
###   gas)
################################################################################
instr_db() {
	args 0 && return 1
	while [ -n "$1" ]
	do
		assemble $(num "$1")
		shift
	done
}

instr_dw() {
	args 0 && return 1
	while [ -n "$1" ]
	do
		assemble $(endian $(tobytes $(pad -b 2 $(tohex "$1"))))
		shift
	done
}

instr_dd() {
	args 0 && return 1
	while [ -n "$1" ]
	do
		assemble $(endian $(tobytes $(pad -b 4 $(tohex "$1"))))
		shift
	done
}

instr_dq() {
	args 0 && return 1
	while [ -n "$1" ]
	do
		assemble $(endian $(tobytes $(pad -b 8 $(tohex "$1"))))
		shift
	done
}

#<<<<<<<<<<<<<<<<<<<<<<<<<
# nop/hlt
instr_nop() {
	args 0 || return 1
	assemble 90
}

instr_hlt() {
	args 0 || return 1
	assemble f4
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# flag operations
instr_sahf() {
	args 0 || return 1
	assemble 9e
}

instr_lahf() {
	args 0 || return 1
	assemble 9f
}

instr_clc() {
	args 0 || return 1
	assemble f8
}

instr_cld() {
	args 0 || return 1
	assemble fc
}

instr_cli() {
	args 0 || return 1
	assemble fa
}

instr_stc() {
	args 0 || return 1
	assemble f9
}

instr_std() {
	args 0 || return 1
	assemble fd
}

instr_sti() {
	args 0 || return 1
	assemble fb
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# string ops
instr_cmpsb() {
	args 0 || return 1
	assemble a6
}

instr_cmpsw() {
	args 0 || return 1
	assemble 66 a7
}

instr_cmpsd() {
	args 0 || return 1
	assemble a7
}

instr_lodsb() {
	args 0 || return 1
	assemble ac
}

instr_lodsw() {
	args 0 || return 1
	assemble 66 ad
}

instr_lodsd() {
	args 0 || return 1
	assemble ad
}

instr_movsb() {
	args 0 || return 1
	assemble a4
}

instr_movsw() {
	args 0 || return 1
	assemble 66 a5
}

instr_movsd() {
	args 0 || return 1
	assemble a5
}

instr_scasb() {
	args 0 || return 1
	assemble ae
}

instr_scasw() {
	args 0 || return 1
	assemble 66 af
}

instr_scasd() {
	args 0 || return 1
	assemble af
}

instr_stosb() {
	args 0 || return 1
	assemble aa
}

instr_stosw() {
	args 0 || return 1
	assemble 66 ab
}

instr_stosd() {
	args 0 || return 1
	assemble ab
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# repeats, loops
instr_rep() {
	args 0 || return 1
	assemble f3
}

instr_repz() {
	args 0 || return 1
	assemble f3
}

instr_repe() {
	args 0 || return 1
	assemble f3
}

instr_repnz() {
	args 0 || return 1
	assemble f2
}

instr_repne() {
	args 0 || return 1
	assemble f2
}

instr_loop() {
	args 1 || return 1
	check_type "$1" "$imm" || return 1
	tohex "$1" 1 || return 1
	assemble e2 $(get_lsb $(offset $1 02))
}

instr_loopz() {
	args 1 || return 1
	check_type "$1" "$imm" || return 1
	tohex "$1" 1 || return 1
	assemble e1 $(get_lsb $(offset $1 02))
}

instr_loopnz() {
	args 1 || return 1
	check_type "$1" "$imm" || return 1
	tohex "$1" 1 || return 1
	assemble e0 $(get_lsb $(offset $1 02))
}

instr_loope() {
	args 1 || return 1
	check_type "$1" "$imm" || return 1
	tohex "$1" 1 || return 1
	assemble e1 $(get_lsb $(offset $1 02))
}

instr_loopne() {
	args 1 || return 1
	check_type "$1" "$imm" || return 1
	tohex "$1" 1 || return 1
	assemble e0 $(get_lsb $(offset $1 02))
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# stack operations
instr_push() {
	check_type "$1" "byte" &&
		shift &&
		tohex "$1" 1 &&
		assemble 6a $(endian $(num "$1")) &&
		return 0
	check_type "$1" "word" &&
		shift &&
		tohex "$1" 2 &&
		assemble 66 68 $(endian $(num "$1")) &&
		return 0

	args 1 || return 1
	check_type "$1" "es" && assemble 06 && return 0
	check_type "$1" "cs" && assemble 0e && return 0
	check_type "$1" "ss" && assemble 16 && return 0
	check_type "$1" "ds" && assemble 1e && return 0

	check_type "$1" "$reg32" &&
		assemble $(hexadd 50 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 $(hexadd 50 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		return 1

	tohex "$1" 4 || return 1
	assemble 68 $(endian $(num "$1"))
}

instr_pop() {
	args 1 || return 1
	check_type "$1" "es" && assemble 06 && return 0
	check_type "$1" "cs" && assemble 0e && return 0
	check_type "$1" "ss" && assemble 16 && return 0
	check_type "$1" "ds" && assemble 1e && return 0

	check_type "$1" "$reg32" &&
		assemble $(hexadd 58 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 $(hexadd 58 $(get_reg $1)) &&
		return 0
	return 1
}

instr_pusha() {
	args 0 || return 1
	assemble 60
}

instr_pushad() {
	args 0 || return 1
	assemble 60
}

instr_popa() {
	args 0 || return 1
	assemble 61
}

instr_popad() {
	args 0 || return 1
	assemble 61
}

instr_pushf() {
	args 0 || return 1
	assemble 9c
}

instr_pushfd() {
	args 0 || return 1
	assemble 9c
}

instr_popf() {
	args 0 || return 1
	assemble 9d
}

instr_popfd() {
	args 0 || return 1
	assemble 9d
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#>>>>>>>>>>>>>>>>>>>>>>>>>
# decimal algebra
instr_aaa() {
	args 0 || return 1
	assemble 37
}

instr_aas() {
	args 0 || return 1
	assemble 3f
}

instr_aam() {
	args 0 || return 1
	assemble d4 0a
}

instr_aad() {
	args 0 || return 1
	assemble d5 0a
}

instr_daa() {
	args 0 || return 1
	assemble 27
}

instr_das() {
	args 0 || return 1
	assemble 2f
}
#<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>
# size conversions
instr_cbw() {
	args 0 || return 1
	assemble 66 98
}

instr_cdq() {
	args 0 || return 1
	assemble 99
}

instr_cwd() {
	args 0 || return 1
	assemble 66 99
}

instr_cwde() {
	args 0 || return 1
	assemble 98
}
#<<<<<<<<<<<<<<<<<<<<<<<<<

#<<<<<<<<<<<<<<<<<<<<<<<<<
# calls, returns, interrupts
instr_call() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble ff $(hexadd d0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 ff $(hexadd d0 $(get_reg $1)) &&
		return 0
	check_type $(memref "$1") "$reg32" &&
		assemble ff $(hexadd 10 $(get_reg $(memref $1))) &&
		return 0
	check_type $(memref "$1") "$imm" &&
		assemble ff 15 $(endian $(address 4 $(memref "$1"))) &&
		return 0
	check_type "$1" "$reg8" && return 1
	check_type "$1" "$imm" || return 1
	tohex "$1" 2 || tohex "$1" 4 || return 1
	assemble e8 $(endian $(tobytes $(pad -b 4 $(offset "$1" 05))))
}

instr_ret() {
	args 0 || args 1 || return 1
	if [ -n "$1" ]
	then
		check_type "$1" "$imm" || return 1
		tohex "$1" 2 || return 1
		assemble c2 $(endian $(num $1))
	else
		assemble c3
	fi
}

instr_retn() {
	args 0 || args 1 || return 1
	if [ -n "$1" ]
	then
		check_type "$1" "$imm" || return 1
		tohex "$1" 2 || return 1
		assemble c2 $(endian $(num $1))
	else
		assemble c3
	fi
}

instr_retf() {
	args 0 || args 1 || return 1
	if [ -n "$1" ]
	then
		check_type "$1" "$imm" || return 1
		tohex "$1" 2 || return 1
		assemble ca $(endian $(num $1))
	else
		assemble cb
	fi
}

instr_int() {
	args 1 || return 1
	check_type "$1" "3" && assemble cc && return 0
	check_type "$1" "$imm" || return 1
	tohex "$1" 1 || return 1
	assemble cd $(num "$1")
}

instr_into() {
	args 0 || return 1
	assemble ce
}

instr_iret() {
	args 0 || return 1
	assemble cf
}

instr_iretd() {
	args 0 || return 1
	assemble cf
}

instr_enter() {
	args 2 || return 1
	check_type "$2" "$imm" || return 1
	tohex "$2" 1 || return 1
	check_type "$1" "$imm" || return 1
	tohex "$2" 1 || tohex "$2" 2 || return 1
	assemble c8 $(endian $(tobytes $(pad -b 2 $(tohex "$1")))) $(num "$2")
}

instr_leave() {
	args 0 || return 1
	assemble c9
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# binary algebra
instr_not() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble f7 $(hexadd d0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 f7 $(hexadd d0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble f6 $(hexadd d0 $(get_reg $1)) &&
		return 0
	return 1
}

instr_neg() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble f7 $(hexadd d8 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 f7 $(hexadd d8 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble f6 $(hexadd d8 $(get_reg $1)) &&
		return 0
	return 1
}

instr_and() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
			check_type "$1" "$reg32" &&
				assemble 21 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
				return 0
			check_type $(memref "$1") "$reg32" &&
				assemble 21 $(hexadd $(get_reg $(memref $1)) $(hexmult 8 $(get_reg $2))) &&
				return 0
			check_type $(memref "$1") "$imm" &&
				assemble 21 $(hexadd 05 $(hexmult 8 $(get_reg $2))) $(endian $(address 4 $(memref $1))) &&
				return 0
	check_type "$2" "$reg16" &&
			check_type "$1" "$reg16" &&
				assemble 66 21 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
				return 0
	check_type "$2" "$reg8" &&
			check_type "$1" "$reg8" &&
				assemble 20 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
				return 0
	return 1
}

instr_or() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
			check_type "$1" "$reg32" &&
			assemble 09 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
			check_type "$1" "$reg16" &&
			assemble 66 09 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
			check_type "$1" "$reg8" &&
			assemble 08 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}

instr_xor() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
			check_type "$1" "$reg32" &&
			assemble 31 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
			check_type "$1" "$reg16" &&
			assemble 66 31 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
			check_type "$1" "$reg8" &&
			assemble 30 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}

instr_rol() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
			check_type "$1" "$reg32" &&
				assemble d1 $(hexadd c0 $(get_reg $1)) &&
				return 0
			check_type "$1" "$reg16" &&
				assemble 66 d1 $(hexadd c0 $(get_reg $1)) &&
				return 0
			check_type "$1" "$reg8"  &&
				assemble d0 $(hexadd c0 $(get_reg $1)) &&
				return 0
	else
			check_type "$1" "$reg32" &&
				assemble c1 $(hexadd c0 $(get_reg $1)) $(num $2) &&
				return 0
			check_type "$1" "$reg16" &&
				assemble 66 c1 $(hexadd c0 $(get_reg $1)) $(num $2) &&
				return 0
			check_type "$1" "$reg8"  &&
				assemble c0 $(hexadd c0 $(get_reg $1)) $(num $2) &&
				return 0
	fi
	return 1
}

instr_ror() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
		check_type "$1" "$reg32" &&
			assemble d1 $(hexadd c8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 d1 $(hexadd c8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble d0 $(hexadd c8 $(get_reg $1)) &&
			return 0
	else
		check_type "$1" "$reg32" &&
			assemble c1 $(hexadd c8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 c1 $(hexadd c8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble c0 $(hexadd c8 $(get_reg $1)) $(num $2) &&
			return 0
	fi
	return 1
}

instr_rcl() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
		check_type "$1" "$reg32" &&
			assemble d1 $(hexadd d0 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 d1 $(hexadd d0 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble d0 $(hexadd d0 $(get_reg $1)) &&
			return 0
	else
		check_type "$1" "$reg32" &&
			assemble c1 $(hexadd d0 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 c1 $(hexadd d0 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble c0 $(hexadd d0 $(get_reg $1)) $(num $2) &&
			return 0
	fi
	return 1
}

instr_rcr() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
		check_type "$1" "$reg32" &&
			assemble d1 $(hexadd d8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 d1 $(hexadd d8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble d0 $(hexadd d8 $(get_reg $1)) &&
			return 0
	else
		check_type "$1" "$reg32" &&
			assemble c1 $(hexadd d8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 c1 $(hexadd d8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble c0 $(hexadd d8 $(get_reg $1)) $(num $2) &&
			return 0
	fi
	return 1
}

instr_shl() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
		check_type "$1" "$reg32" &&
			assemble d1 $(hexadd e0 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 d1 $(hexadd e0 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble d0 $(hexadd e0 $(get_reg $1)) &&
			return 0
	else
		check_type "$1" "$reg32" &&
			assemble c1 $(hexadd e0 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 c1 $(hexadd e0 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble c0 $(hexadd e0 $(get_reg $1)) $(num $2) &&
			return 0
	fi
	return 1
}

instr_shr() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
		check_type "$1" "$reg32" &&
			assemble d1 $(hexadd e8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 d1 $(hexadd e8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble d0 $(hexadd e8 $(get_reg $1)) &&
			return 0
	else
		check_type "$1" "$reg32" &&
			assemble c1 $(hexadd e8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 c1 $(hexadd e8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble c0 $(hexadd e8 $(get_reg $1)) $(num $2) &&
			return 0
	fi
	return 1
}

instr_sal() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
		check_type "$1" "$reg32" &&
			assemble d1 $(hexadd e0 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 d1 $(hexadd e0 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble d0 $(hexadd e0 $(get_reg $1)) &&
			return 0
	else
		check_type "$1" "$reg32" &&
			assemble c1 $(hexadd e0 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 c1 $(hexadd e0 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble c0 $(hexadd e0 $(get_reg $1)) $(num $2) &&
			return 0
	fi
	return 1
}

instr_sar() {
	args 2 || return 1
	if [ "$2" = "1" ]
	then
		check_type "$1" "$reg32" &&
			assemble d1 $(hexadd f8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 d1 $(hexadd f8 $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble d0 $(hexadd f8 $(get_reg $1)) &&
			return 0
	else
		check_type "$1" "$reg32" &&
			assemble c1 $(hexadd f8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 c1 $(hexadd f8 $(get_reg $1)) $(num $2) &&
			return 0
		check_type "$1" "$reg8" &&
			assemble c0 $(hexadd f8 $(get_reg $1)) $(num $2) &&
			return 0
	fi
	return 1
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# mov and xchg
instr_mov() {
	args 2 || return 1
	sas_asm=$(memref "$1")
	check_type "$2" "eax" && check_type "$sas_asm" "$imm" &&
		sas_asm=$(address 4 $sas_asm) &&
		assemble a3 $(endian $sas_asm) &&
		return 0
	check_type "$2" "ax" && check_type "$sas_asm" "$imm" &&
		sas_asm=$(address 2 $sas_asm) &&
		assemble a3 $(endian $sas_asm) &&
		return 0
	check_type "$2" "al" && check_type "$sas_asm" "$imm" &&
		sas_asm=$(address 1 $sas_asm) &&
		assemble a2 $(endian $sas_asm) &&
		return 0
	if check_type "$2" "$sreg"
	then
		check_type "$1" "$reg32" &&
			assemble 8c $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 8c $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
		if check_type "$1" "$mref"
		then
			sas_asm=$(memref "$1") &&
			check_type "$sas_asm" "$reg32" &&
				assemble 8c $(hexadd $(hexmult 8 $(get_reg $2)) $(get_reg $sas_asm)) &&
				return 0
			check_type "$sas_asm" "$imm" &&
				sas_asm=$(address 4 $sas_asm) &&
				assemble 8c $(hexadd 05 $(hexmult 8 $(get_reg $2))) $(endian $sas_asm) &&
				return 0
		fi
	fi
	if check_type "$1" "$sreg"
	then
		check_type "$2" "$reg32 $reg16" &&
			assemble 8e $(hexadd c0 $(hexmult 8 $(get_reg $1)) $(get_reg $2)) &&
			return 0
		if check_type "$2" "$mref"
		then
			sas_asm=$(memref "$2") &&
			check_type "$sas_asm" "$reg32" &&
				assemble 8e $(hexadd $(hexmult 8 $(get_reg $1)) $(get_reg $sas_asm)) &&
				return 0
			check_type "$sas_asm" "$imm" &&
				sas_asm=$(address 4 $sas_asm) &&
				assemble 8e $(hexadd 05 $(hexmult 8 $(get_reg $1))) $(endian $sas_asm) &&
				return 0
		fi
	fi
	if check_type "$2" "$reg32"
	then
		check_type "$1" "$reg32" &&
			assemble 89 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
		if check_type "$1" "$mref"
		then
			sas_asm=$(memref "$1") &&
			check_type "$sas_asm" "$reg32" &&
				assemble 89 $(hexadd $(hexmult 8 $(get_reg $2)) $(get_reg $sas_asm)) &&
				return 0
			check_type "$sas_asm" "$imm" &&
				sas_asm=$(address 4 $sas_asm) &&
				assemble 89 $(hexadd 5 $(hexmult 8 $(get_reg $2))) $(endian $sas_asm) &&
				return 0
		fi
	fi
	if check_type "$2" "$reg16"
	then
		check_type "$1" "$reg16" &&
			assemble 66 89 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
		if check_type "$1" "$mref"
		then
			sas_asm=$(memref "$1")
			check_type "$sas_asm" "$reg32" &&
				assemble 66 89 $(hexadd $(hexmult 8 $(get_reg $2)) $(get_reg $sas_asm)) &&
				return 0
			check_type "$sas_asm" "$imm" &&
				sas_asm=$(address 4 $sas_asm) &&
				assemble 66 89 $(hexadd 5 $(hexmult 8 $(get_reg $2))) $(endian $sas_asm) &&
				return 0
		fi
	fi
	if check_type "$2" "$reg8"
	then
		check_type "$1" "$reg8" &&
			assemble 88 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
		if check_type "$1" "$mref"
		then
			sas_asm=$(memref "$1")
			check_type "$sas_asm" "$reg32" &&
				assemble 88 $(hexadd $(hexmult 8 $(get_reg $2)) $(get_reg $sas_asm)) &&
				return 0
			check_type "$sas_asm" "$imm" &&
				sas_asm=$(address 4 $sas_asm) || return 1
				assemble 88 $(hexadd 5 $(hexmult 8 $(get_reg $2))) $(endian $sas_asm) &&
				return 0
		fi
	fi
	if check_type "$2" "$imm"
	then
		if check_type "$1" "$mref"
		then
			sas_asm=$(memref "$1")
			check_type "$sas_asm" "$reg32" &&
				check_size -b 4 $2 &&
					assemble c7 $(get_reg -b $sas_asm) $(endian $(address 4 $2)) &&
					return 0
				check_size -b 2 $2 &&
					assemble 66 c7 $(get_reg -b $sas_asm) $(endian $(address 4 $2)) &&
					return 0
				check_size -b 1 $2 &&
					assemble c6 $(get_reg -b $sas_asm) $(endian $(address 4 $2)) &&
					return 0
			check_type "$sas_asm" "$imm" &&
				check_size -b 4 $2 &&
					assemble c7 05 $(endian $(address 4 $sas_asm)) $(address 1 $2) &&
					return 0
				check_size -b 2 $2 &&
					assemble 66 c7 05 $(endian $(address 4 $sas_asm)) $(address 1 $2) &&
					return 0
				check_size -b 1 $2 &&
					assemble c6 05 $(endian $(address 4 $sas_asm)) $(address 1 $2) &&
					return 0
		fi
		sas_asm=$(tohex $2)
		case $((${#sas_asm}/2)) in
			4)
				check_type "$1" "eax" &&
					assemble a1 $(endian $sas_asm) &&
					return 0
				check_type "$1" "$reg32" &&
					assemble $(hexadd b8 $(get_reg $1)) $(endian $sas_asm) &&
					return 0
				;;
			2)
				check_type "$1" "ax" &&
					assemble a1 $(endian $sas_asm) &&
					return 0
				check_type "$1" "$reg16" &&
					assemble 66 $(hexadd b8 $(get_reg $1)) $(endian $sas_asm) &&
					return 0
				;;
			1)
				check_type "$1" "al" &&
					assemble a0 $(endian $sas_asm) &&
					return 0
				check_type "$1" "$reg8" &&
					assemble $(hexadd b0 $(get_reg $1)) $(endian $sas_asm) &&
					return 0
				;;
		esac
	fi
	if check_type "$2" "$mref"
	then
		sas_asm=$(memref "$2")
		if check_type $sas_asm "$reg32"
		then
			check_type "$1" "$reg32" &&
				assemble $(hexadd 8b $(get_reg $1)) $(get_reg -b $sas_asm) &&
				return 0
			check_type "$1" "$reg16" &&
				assemble 66 $(hexadd 8b $(get_reg $1)) $(get_reg -b $sas_asm) &&
				return 0
			check_type "$1" "$reg8" &&
				assemble $(hexadd 8a $(get_reg $1)) $(get_reg -b $sas_asm) &&
				return 0
		fi
		if check_type $sas_asm "$imm"
		then
			sas_asm=$(address 4 $sas_asm) || return 1
			check_type "$1" "$reg32" &&
				assemble $(hexadd a1 $(get_reg $1)) $(endian $sas_asm) &&
				return 0
			check_type "$1" "$reg16" &&
				assemble 66 $(hexadd a1 $(get_reg $1)) $(endian $sas_asm) &&
				return 0
			check_type "$1" "$reg8" &&
				assemble $(hexadd a0 $(get_reg $1)) $(endian $sas_asm) &&
				return 0
		fi
	fi
	return 1
}

instr_xchg() {
	args 2 || return 1
	check_type "$2" "eax" &&
		assemble $(hexadd 90 $(get_reg $1)) &&
		return 0
	if check_type "$2" "$reg32"
	then
		check_type "$1" "eax" &&
			assemble $(hexadd 90 $(get_reg $2)) &&
			return 0
		check_type "$1" "$reg32" &&
			assemble 87 $(hexadd c0 $(hexmult 8 $(get_reg $1)) $(get_reg $2)) &&
			return 0
	fi
	check_type "$2" "ax" &&
		assemble 66 $(hexadd 90 $(get_reg $1)) &&
		return 0
	if check_type "$2" "$reg16"
	then
		check_type "$1" "ax" &&
			assemble 66 $(hexadd 90 $(get_reg $2)) &&
			return 0
		check_type "$1" "$reg16" &&
			assemble 66 87 $(hexadd c0 $(hexmult 8 $(get_reg $1)) $(get_reg $2)) &&
			return 0
	fi
	check_type "$2" "$reg8" &&
		check_type "$1" "$reg8" &&
			assemble 86 $(hexadd c0 $(hexmult 8 $(get_reg $1)) $(get_reg $2)) &&
			return 0
	return 1
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# input/output
instr_in() {
	args 2 || return 1
	if check_type "$2" "dx"
	then
		check_type "$1" "eax" &&
			assemble ed &&
			return 0
		check_type "$1" "ax" &&
			assemble 66 ed &&
			return 0
		check_type "$1" "al" &&
			assemble ec &&
			return 0
	fi
	check_type "$2" "$imm" || return 1
	tohex "$2" 1 || return 1
	check_type "$1" "eax" &&
		assemble e5 $(num "$2") &&
		return 0
	check_type "$1" "ax" &&
		assemble 66 e5 $(num "$2") &&
		return 0
	check_type "$1" "al" &&
		assemble e4 $(num "$2") &&
		return 0
	return 1
}

instr_out() {
	args 2 || return 1
	if check_type "$1" "dx"
	then
		check_type "$2" "eax" &&
			assemble ef &&
			return 0
		check_type "$2" "ax" &&
			assemble ef &&
			return 0
		check_type "$2" "al" &&
			assemble ee &&
			return 0
	fi
	check_type "$1" "$imm" || return 1
	tohex "$1" 1 || return 1
	check_type "$2" "eax" &&
		assemble e7 $(num "$1") &&
		return 0
	check_type "$2" "ax" &&
		assemble 66 e7 $(num "$1") &&
		return 0
	check_type "$2" "al" &&
		assemble e6 $(num "$1") &&
		return 0
	return 1
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# integer algebra
instr_add() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
		check_type "$1" "$reg32" &&
			assemble 01 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
		check_type "$1" "$reg16" &&
			assemble 66 01 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
		check_type "$1" "$reg8" &&
			assemble 00 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}

instr_sub() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
		check_type "$1" "$reg32" &&
			assemble 29 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
		check_type "$1" "$reg16" &&
			assemble 66 29 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
		check_type "$1" "$reg8" &&
			assemble 28 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}

instr_adc() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
		check_type "$1" "$reg32" &&
			assemble 11 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
		check_type "$1" "$reg16" &&
			assemble 66 11 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
		check_type "$1" "$reg8" &&
			assemble 10 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}

instr_sbb() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
		check_type "$1" "$reg32" &&
			assemble 19 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
		check_type "$1" "$reg16" &&
			assemble 66 19 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
		check_type "$1" "$reg8" &&
			assemble 18 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}

instr_mul() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble f7 $(hexadd e0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 f7 $(hexadd e0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble f6 $(hexadd e0 $(get_reg $1)) &&
		return 0
	return 1
}

instr_div() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble f7 $(hexadd f0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 f7 $(hexadd f0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble f6 $(hexadd f0 $(get_reg $1)) &&
		return 0
	return 1
}


instr_imul() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble f7 $(hexadd e8 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 f7 $(hexadd e8 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble f6 $(hexadd e8 $(get_reg $1)) &&
		return 0
	return 1
}

instr_idiv() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble f7 $(hexadd f8 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 f7 $(hexadd f8 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble f6 $(hexadd f8 $(get_reg $1)) &&
		return 0
	return 1
}

instr_inc() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble $(hexadd 40 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 $(hexadd 40 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble fe $(hexadd c0 $(get_reg $1)) &&
		return 0
	return 1
}

instr_dec() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble $(hexadd 48 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 $(hexadd 48 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg8" &&
		assemble fe $(hexadd c8 $(get_reg $1)) &&
		return 0
	return 1
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# tests and comparisons
instr_cmp() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
		check_type "$1" "$reg32" &&
			assemble 39 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
		check_type "$1" "$reg16" &&
			assemble 66 39 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
		check_type "$1" "$reg8" &&
			assemble 38 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}

instr_test() {
	args 2 || return 1
	check_type "$2" "$reg32" &&
		check_type "$1" "$reg32" &&
			assemble 85 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg16" &&
		check_type "$1" "$reg16" &&
			assemble 66 85 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	check_type "$2" "$reg8" &&
		check_type "$1" "$reg8" &&
			assemble 84 $(hexadd c0 $(hexmult 8 $(get_reg $2)) $(get_reg $1)) &&
			return 0
	return 1
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

#<<<<<<<<<<<<<<<<<<<<<<<<<
# jumps
instr_jmp() {
	args 1 || return 1
	check_type "$1" "$reg32" &&
		assemble ff $(hexadd e0 $(get_reg $1)) &&
		return 0
	check_type "$1" "$reg16" &&
		assemble 66 ff $(hexadd e0 $(get_reg $1)) &&
		return 0
	return 1
}

instr_jcxz() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 1 || tohex "$1" 2 || return 1
		assemble 67 e3 $(get_lsb $(offset $1 03))
		return 0
	fi
	return 1
}

instr_jecxz() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 1 || tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble e3 $(get_lsb $(offset $1 02))
		return 0
	fi
	return 1
}

instr_jz() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 84 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnz() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 85 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jc() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 82 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnc() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 83 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jo() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 80 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jno() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 81 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jp() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8a $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnp() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8b $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jpe() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8a $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jpo() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8b $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_js() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 88 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jns() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 89 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_je() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 84 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jne() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 85 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_ja() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 87 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jna() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 86 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jae() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 83 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnae() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 82 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jb() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 82 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnb() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 83 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jbe() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 86 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnbe() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 87 $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jg() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8f $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jng() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8e $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jge() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8d $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnge() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8c $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jl() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8c $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnl() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8d $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jle() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8e $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}

instr_jnle() {
	args 1 || return 1
	if check_type "$1" "$imm"
	then
		tohex "$1" 2 || tohex "$1" 4 || return 1
		assemble 0f 8f $(endian $(tobytes $(pad -b 4 $(offset "$1" 06))))
		return 0
	fi
	return 1
}
#>>>>>>>>>>>>>>>>>>>>>>>>>

instr_cmc() {
	args 0 || return 1
	assemble f5
}

instr_lock() {
	args 0 || return 1
	assemble f0
}

instr_wait() {
	args 0 || return 1
	assemble 9b
}

instr_xlat() {
	args 0 || return 1
	assemble d7
}

